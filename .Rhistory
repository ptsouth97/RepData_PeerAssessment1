cacheSolve(c)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- getinverse(x)
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve(c)
getinverse <- function() m
setinverse <- function(inverse) m <<- inverse
cacheSolve(c)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
setinverse(m)
m
}
cacheSolve(c)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- get()
m <- solve(data, ...)
setinverse(m)
m
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- get()
m <- solve(data, ...)
setinverse(m)
m
}
cacheSolve(c)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- getinverse()x
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- get()
m <- solve(data, ...)
setinverse(m)x
m
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x.getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x.get()
m <- solve(data, ...)
x.setinverse(m)
m
}
cacheSolve(c)
list(a=1:5, b=rnorm(10))
x<-list(a=1:5, b=rnorm(10))
lapply(x,mean)
mean(x)
traceback()
getwd()
install(sqldf)
install("sqldf")
install.packages("sqldf")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv,stringAsFactors=FALSE)
mydf<-read.csv("path2csv",stringAsFactors=FALSE)
?read.csv
mydf<-read.csv("path2csv",stringsAsFactors=FALSE)
mydf<-read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id, package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
select(cran,-(X:size))
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,r_version=="3.0.2",country=="IN")
filter(cran,r_version<="3.0.2",country=="IN")
filter(cran,country=="US"|country=="IN")
filter(cran,size>100500 & r_os=="linux-gnu")
filter(cran,size>100500 , r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2, country,desc(r_version), ip_id)
cran3<-select(cran,ip_id,package, size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size+100)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
data.frame(subject=1:3,activity=4:6)
data.frame(subject=1:3,activity=4:6,x_avg=7:9)
test<-data.frame(subject=1:3,activity=4:6,x_avg=7:9)
test
test$subject
test$1
mean(test$x_avg)
mean(test$activity)
mean(test$subject)
grep("1",test)
test[2,1]<-1
test[3,1]<-1
test
grep("1",test)
grep("1",test$subject)
grep("4",test$subject)
wherearetheones<-grep("1",test$subject)
wherearetheones
class(wherearetheones)
library(nlme)
library(lattice)
xyplot(weight~Tme|Diet,BodyWeight)
xyplot(weight~Time|Diet,BodyWeight)
?trellis.par.set()
?geo
library(datasets)
data(airquality)
qplot(Wnd,Ozone, data=airquality,facets=. ~ factor(Month))
library(dplyr)
plot1<-function(){
# read the data frame
NEI <- readRDS("summarySCC_PM25.rds")
# group by year
years <- group_by(NEI, year)
# sum each year
summary <- summarize(years, Emissions=sum(Emissions))
# plot the data
with(summary, plot(year, Emissions,
main = "U.S. Air Pollution By Year",
ylab = "Total Emissions (tons)",
col = "red"))
# add a regression line to the plot
model<-lm(TotalEmissions ~ year, subset)
abline(model, lwd=2, col="blue")
# copy the image and create a .png file
dev.copy(png,filename="plot1.png")
dev.off ()
}
plot1<-function(){
# read the data frame
NEI <- readRDS("summarySCC_PM25.rds")
# group by year
years <- group_by(NEI, year)
# sum each year
summary <- summarize(years, Emissions=sum(Emissions))
# plot the data
with(summary, plot(year, Emissions,
main = "U.S. Air Pollution By Year",
ylab = "Total Emissions (tons)",
col = "red"))
# add a regression line to the plot
model<-lm(TotalEmissions ~ year, subset)
abline(model, lwd=2, col="blue")
# copy the image and create a .png file
dev.copy(png,filename="plot1.png")
dev.off ()
}
plot1()
plot1<-function(){
# read the data frame
NEI <- readRDS("summarySCC_PM25.rds")
# group by year
years <- group_by(NEI, year)
# sum each year
summary <- summarize(years, Emissions=sum(Emissions))
# plot the data
with(summary, plot(year, Emissions,
main = "U.S. Air Pollution By Year",
ylab = "Total Emissions (tons)",
col = "red"))
# add a regression line to the plot
model<-lm(TotalEmissions ~ year, subset)
abline(model, lwd=2, col="blue")
# copy the image and create a .png file
dev.copy(png,filename="plot1.png")
dev.off ()
}
plot4<-function(){
# read the data frames
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
# combine the data frames
merged <- merge(NEI, SCC, by="SCC")
# keep only those rows that indicate 'coal combustion'
filtered <- filter(merged, grepl("Combustion", SCC.Level.One), grepl("Coal", SCC.Level.Three))
# group by year
years <- group_by(filtered, year)
# sum each year
summary <- summarize(years, Emissions=sum(Emissions))
# create a .png file
png(file="plot4.png")
# plot the data
print(
qplot(year, Emissions, data = summary,
main = "U.S. Coal Combustion Emissions",
geom = c("point", "smooth"),
method = "lm",
ylab = "PM2.5 (tons)")
)
# end the creation of .png file
dev.off ()
}
setwd("~/Personal/Hobbies and Interests/Astronomy/AAVSO/Coursera/Reproducible Research/Assessments/RepData_PeerAssessment1")
library(dplyr)
rawdata <- read.csv("activity.csv")
int <- group_by(rawdata, interval)
intavg <- summarize(int, steps=mean(steps, na.rm = TRUE))
head(intavg,20)
head(int)
head(rawdata)
is.na(rawdata[1,1])
for(i in 1:17568){
if(is.na(rawdata[i,1])==TRUE){
findint <- rawdata[i,3]
rawdata[i,1] <- intavg[(findint+5)/5,2]
}
}
sum(is.na(rawdata))
head(intavg)
head(rawdata)
tail(rawdata)
nrow(rawdata)
head(rawdata)
head(rawdata,50)
tail(rawdata)
is.na(rawdata[17568,1])
findint<-rawdata[17568,3]
findint
rawdata[17568,1]<-intavg[(findint+5)/5,2]
rawdata[17568,]
(findint+5)/2
intavg[1180,]
intavg
tail(intavg,50)
nrow(intavg)
head(intavg)
?grep
grep(0, intavg)
answer<-grep(0, intavg)
answer
intavg[1]
intavg[1,2]
grep(0, intavg[,1])
grep(1, intavg[,1])
grep(2, intavg[,1])
grep(5, intavg[,1])
grepl(5, intavg[,1])
grepl("5", intavg[,1])
grepl("3", intavg[,1])
grep("0", intavg[,1])
grep("5", intavg[,1])
intavg
grep("5", intavg$interval)
grep("5", intavg$interval, fixed = TRUE)
grep("\b5\b", intavg$interval)
grep("5\b", intavg$interval)
grep("^5$", intavg$interval)
grep("^0$", intavg$interval)
grep("^10$", intavg$interval)
grep("^100$", intavg$interval)
head(intavg,1)
rawdata <- read.csv("activity.csv")
impdat <- rawdata
impdata <- rawdata
head(impdata)
length<-nrow(impdata)
for(i in 1:length){
if(is.na(rawdata[i,1])==TRUE){
#findint <- rawdata[i,3]
reg_exp <- paste("^", rawdata[i,3], "$", sep = "")
findint <- grep(reg_exp, intavg$interval)
rawdata[i,1] <- intavg[findint,2]
}
}
rawdata <- read.csv("activity.csv")
impdata <- rawdata
length<-nrow(impdata)
for(i in 1:length){
if(is.na(impdata[i,1])==TRUE){
#findint <- rawdata[i,3]
reg_exp <- paste("^", rawdata[i,3], "$", sep = "")
findint <- grep(reg_exp, intavg$interval)
rawdata[i,1] <- intavg[findint,2]
}
}
sum(is.na(impdata))
for(i in 1:length){
if(is.na(impdata[i,1])==TRUE){
#findint <- rawdata[i,3]
reg_exp <- paste("^", impdata[i,3], "$", sep = "")
findint <- grep(reg_exp, intavg$interval)
impdata[i,1] <- intavg[findint,2]
}
}
sum(is.na(impdata))
tail(impdata)
summary(impdata)
head(impdata)
rawdata[17568,]
intavg
?weekdays
head(impdata,3)
weekdays(impdata[1,2])
class(impdata[1,2])
?as.posixt
?posixt
?posix
as.POSIXct(impdata[1,2])
weekdays(as.POSIXct(impdata[1,2]))
head(impdata)
impdata$day <- weekdays(as.POSIXct(impdata$date))
head(impdata)
impdata$day <- if(weekdays(as.POSIXct(impdata$date))=="Saturday"|"Sunday")
{"Weekend"}else{"Weekday"}
impdata$day <- if(weekdays(as.POSIXct(impdata$date))=="Saturday"||"Sunday")
{"Weekend"}else{"Weekday"}
head(impdata,50)
tail(impdata)
as.POSIXct(impdata[1,2])
weekdays(as.POSIXct(impdata[1,2]))
weekdays(as.POSIXct(impdata[1,2]))=="Monday"
weekdays(as.POSIXct(impdata[1,2]))=="Monday"||"Tuesday"
weekdays(as.POSIXct(impdata[1,2]))=="Wednesday"||"Tuesday"
weekdays(as.POSIXct(impdata[1,2]))=="Monday"||"Tuesday"
as.POSIXct(impdata[1,278])
as.POSIXct(impdata[300,1])
weekdays(as.POSIXct(impdata[300,2]))
weekdays(as.POSIXct(impdata[700,2]))
weekdays(as.POSIXct(impdata[1,2]))=="Saturday"|"Tuesday"
weekdays(as.POSIXct(impdata[1,2]))=="Monday"|"Tuesday"
weekdays(as.POSIXct(impdata[1,2]))=="Monday"||"Tuesday"
weekdays(as.POSIXct(impdata[1,2]))
test<-weekdays(as.POSIXct(impdata[1,2]))
class(test)
as.complex("Monday")
as.numeric("Monday")
"Monday" == "Monday"
"Monday" == "Sunday"
"Monday"=="Monday"||"Tuesday"
"Monday"=="Friday"||"Tuesday"
"Monday"=="Friday||Tuesday"
impdata$day <- if(weekdays(as.POSIXct(impdata$date))=="Saturday||Sunday")
{"Weekend"}else{"Weekday"}
head(impdata)
select(impdata, Weekday)
weekdays <- filter(impdata, day==Weekday)
weekdays <- filter(impdata, day=="Weekday")
head(weekdays)
weekends <- filter(impdata, day=="Weekend")
head(weekends)
impdata
summary(impdata)
range(impdata$day)
impdata$day <- if(weekdays(as.POSIXct(impdata$date))=="Saturday||Sunday")
"weekend"
else"weekday"
impdata$day <- if(weekdays(as.POSIXct(impdata$date))=="Saturday||Sunday"){
"weekend"}
else{"weekday"}
"Monday"=="Monday"
"Monday"=="Tuesday"
"Monday"=="Monday||Tuesday"
"Monday"=="Monday"||"Tuesday"
"Monday"=="Friday"||"Tuesday"
"Monday"=="Monday||Tuesday"
impdata$day <- if(weekdays(as.POSIXct(impdata$date))=="Saturday"{"weekend"}
if(weekdays(as.POSIXct(impdata$date))=="Sunday"{"weekend"}
else{"weekday"}
impdata$day <- if(weekdays(as.POSIXct(impdata$date))=="Saturday"){"weekend"}
if(weekdays(as.POSIXct(impdata$date))=="Sunday"){"weekend"}
else{"weekday"}
impdata$day <- if(weekdays(as.POSIXct(impdata$date))=="Saturday"){"weekend"}
if(weekdays(as.POSIXct(impdata$date))=="Sunday"){"weekend"}else
{"weekday"}
head(impdata)
impdata$day <- if(weekdays(as.POSIXct(impdata$date))=="Saturday"){"weekend"}
if(weekdays(as.POSIXct(impdata$date))=="Sunday"){"weekend"}else
{"weekday"}
impdata
head(impdata)
impdata$day <- if(weekdays(as.POSIXct(impdata$date))=="Saturday"){
"weekend"
}else if(weekdays(as.POSIXct(impdata$date))=="Sunday"){
"weekend"
}else {
"weekday"
}
head(impdata)
summary(impdata)
range(impdata$day)
"Saturday"=="Saturday"
"Sat"=="Saturday"
if("Saturday"=="Saturday")print"Hooray!"
if("Saturday"=="Saturday"){print("Hooray!")}
if("Sat"=="Saturday"){print("Hooray!")}
if("Saturday"=="Monday"){print("Hooray!")}
if("Saturday"=="Monday"|"Saturday"){print("Hooray!")}
if("Saturday"=="Monday"||"Saturday"){print("Hooray!")}
if("Saturday"=="Monday||Saturday"){print("Hooray!")}
if(Saturday=="Monday||Saturday"){print("Hooray!")}
if("Saturday"=="Monday||Saturday"){print("Hooray!")}
if("Saturday"=="Monday|Saturday"){print("Hooray!")}
if("Saturday"=="Saturday"){print("Hooray!")}
if("Saturday"=="Saturday"){print("weekend")}
if("Saturday"=="Saturday"){print("weekend")}else{"weekend"}
class("Saturday")
class(weekdays(as.POSIXct(impdata[1,2])))
impdata$day <- if(weekdays(as.POSIXct(impdata$date))=="Saturday"){
"weekend"
}else if(weekdays(as.POSIXct(impdata$date))=="Sunday"){
"weekend"
}else {
"weekday"
}
range(impdata$day)
?ifelse
day<-Monday
ifelse(day=="Saturday"||"Sunday")
day<-"Monday"
ifelse(day=="Saturday"||"Sunday")
ifelse(day=="Saturday"|"Sunday")
ifelse(day=="Saturday||Sunday")
ifelse(day=="Saturday||Sunday", "weekend", "weekday")
day<-"Saturday"
ifelse(day=="Saturday||Sunday", "weekend", "weekday")
ifelse(day=="Saturday"||"Sunday", "weekend", "weekday")
day<-"Thursday"
ifelse(day=="Saturday"||"Sunday", "weekend", "weekday")
day<-"Sunday"
ifelse(day=="Saturday"||"Sunday", "weekend", "weekday")
day<-"Saturday"
ifelse(day=="Saturday"||"Sunday", "weekend", "weekday")
ifelse(day=="Saturday"||day=="Sunday", "weekend", "weekday")
day<-"Sunday"
ifelse(day=="Saturday"||day=="Sunday", "weekend", "weekday")
day<-"Tuesday"
ifelse(day=="Saturday"||day=="Sunday", "weekend", "weekday")
impdata$day <- ifelse(weekdays(as.POSIXct(impdata$date))=="Saturday"||
weekdays(as.POSIXct(impdata$date))=="Sunday",
"weekend", "weekday")
summary(impdata)
range(impdata$day)
impdata$day <- ifelse(weekdays(as.POSIXct(impdata$date))=="Saturday"|
weekdays(as.POSIXct(impdata$date))=="Sunday",
"weekend", "weekday")
range(impdata$day)
head(impdata)
int2<- group_by(impdata, interval)
ast2 <- summarize(int2, steps=mean(steps, na.rm = TRUE))
head(ast2)
head(int2)
?cbind
head(impdata)
weekdays <- filter(impdata, day=="weekday")
wkdaysint<- group_by(weekdays, interval)
wkdaysast <- summarize(wkdaysint, steps=mean(steps, na.rm = TRUE))
weekends <- filter(impdata, day=="weekend")
wkendsint<- group_by(weekends, interval)
wkdendsast <- summarize(wkendsint, steps=mean(steps, na.rm = TRUE))
xyplot(steps ~ interval, data = wkdaysast & wkdendsast, layout = c(1,2), type = "l")
library(lattice)
xyplot(steps ~ interval, data = wkdaysast & wkdendsast, layout = c(1,2), type = "l")
xyplot(steps ~ interval, data = wkdaysast, layout = c(1,2), type = "l")
xyplot(steps ~ interval, data = wkdendsast, layout = c(1,2), type = "l")
