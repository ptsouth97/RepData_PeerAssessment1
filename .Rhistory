c
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve(c)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- getinverse(x)
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve(c)
getinverse <- function() m
setinverse <- function(inverse) m <<- inverse
cacheSolve(c)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
setinverse(m)
m
}
cacheSolve(c)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- get()
m <- solve(data, ...)
setinverse(m)
m
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- get()
m <- solve(data, ...)
setinverse(m)
m
}
cacheSolve(c)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- getinverse()x
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- get()
m <- solve(data, ...)
setinverse(m)x
m
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x.getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x.get()
m <- solve(data, ...)
x.setinverse(m)
m
}
cacheSolve(c)
list(a=1:5, b=rnorm(10))
x<-list(a=1:5, b=rnorm(10))
lapply(x,mean)
mean(x)
traceback()
getwd()
install(sqldf)
install("sqldf")
install.packages("sqldf")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv,stringAsFactors=FALSE)
mydf<-read.csv("path2csv",stringAsFactors=FALSE)
?read.csv
mydf<-read.csv("path2csv",stringsAsFactors=FALSE)
mydf<-read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id, package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
select(cran,-(X:size))
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,r_version=="3.0.2",country=="IN")
filter(cran,r_version<="3.0.2",country=="IN")
filter(cran,country=="US"|country=="IN")
filter(cran,size>100500 & r_os=="linux-gnu")
filter(cran,size>100500 , r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2, country,desc(r_version), ip_id)
cran3<-select(cran,ip_id,package, size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size+100)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
data.frame(subject=1:3,activity=4:6)
data.frame(subject=1:3,activity=4:6,x_avg=7:9)
test<-data.frame(subject=1:3,activity=4:6,x_avg=7:9)
test
test$subject
test$1
mean(test$x_avg)
mean(test$activity)
mean(test$subject)
grep("1",test)
test[2,1]<-1
test[3,1]<-1
test
grep("1",test)
grep("1",test$subject)
grep("4",test$subject)
wherearetheones<-grep("1",test$subject)
wherearetheones
class(wherearetheones)
library(nlme)
library(lattice)
xyplot(weight~Tme|Diet,BodyWeight)
xyplot(weight~Time|Diet,BodyWeight)
?trellis.par.set()
?geo
library(datasets)
data(airquality)
qplot(Wnd,Ozone, data=airquality,facets=. ~ factor(Month))
library(dplyr)
plot1<-function(){
# read the data frame
NEI <- readRDS("summarySCC_PM25.rds")
# group by year
years <- group_by(NEI, year)
# sum each year
summary <- summarize(years, Emissions=sum(Emissions))
# plot the data
with(summary, plot(year, Emissions,
main = "U.S. Air Pollution By Year",
ylab = "Total Emissions (tons)",
col = "red"))
# add a regression line to the plot
model<-lm(TotalEmissions ~ year, subset)
abline(model, lwd=2, col="blue")
# copy the image and create a .png file
dev.copy(png,filename="plot1.png")
dev.off ()
}
plot1<-function(){
# read the data frame
NEI <- readRDS("summarySCC_PM25.rds")
# group by year
years <- group_by(NEI, year)
# sum each year
summary <- summarize(years, Emissions=sum(Emissions))
# plot the data
with(summary, plot(year, Emissions,
main = "U.S. Air Pollution By Year",
ylab = "Total Emissions (tons)",
col = "red"))
# add a regression line to the plot
model<-lm(TotalEmissions ~ year, subset)
abline(model, lwd=2, col="blue")
# copy the image and create a .png file
dev.copy(png,filename="plot1.png")
dev.off ()
}
plot1()
plot1<-function(){
# read the data frame
NEI <- readRDS("summarySCC_PM25.rds")
# group by year
years <- group_by(NEI, year)
# sum each year
summary <- summarize(years, Emissions=sum(Emissions))
# plot the data
with(summary, plot(year, Emissions,
main = "U.S. Air Pollution By Year",
ylab = "Total Emissions (tons)",
col = "red"))
# add a regression line to the plot
model<-lm(TotalEmissions ~ year, subset)
abline(model, lwd=2, col="blue")
# copy the image and create a .png file
dev.copy(png,filename="plot1.png")
dev.off ()
}
plot4<-function(){
# read the data frames
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
# combine the data frames
merged <- merge(NEI, SCC, by="SCC")
# keep only those rows that indicate 'coal combustion'
filtered <- filter(merged, grepl("Combustion", SCC.Level.One), grepl("Coal", SCC.Level.Three))
# group by year
years <- group_by(filtered, year)
# sum each year
summary <- summarize(years, Emissions=sum(Emissions))
# create a .png file
png(file="plot4.png")
# plot the data
print(
qplot(year, Emissions, data = summary,
main = "U.S. Coal Combustion Emissions",
geom = c("point", "smooth"),
method = "lm",
ylab = "PM2.5 (tons)")
)
# end the creation of .png file
dev.off ()
}
setwd("~/Personal/Hobbies and Interests/Astronomy/AAVSO/Coursera/Reproducible Research/Assessments/RepData_PeerAssessment1")
rawdata <- read.csv("activity.csv")
library(dplyr)
int <- group_by(rawdata, interval)
head(int,5)
inttoHHMM <-function(i){ sprintf("%02d", i %/% 100, i %% 100)}
int$newint<-"time"
head(int, 5)
int$newint<-inttoHHMM{newint$}
intoHHMM{0}
intoHHMM(0)
inttoHHMM(0)
intToHHMM <-function(i){ sprintf("%02d:%02d", i %/% 100, i %% 100)}
intToHHMM(0)
intToHHMM(5)
int <- group_by(rawdata, interval)
head(int, 5)
int$time
int$newtime
head(int,5)
int$time<-NA
head(int,3)
rows <- nrow(int)
for(i 1:rows){
int[i, 4]<-sprintf("%02d", i %/% 100, i %% 100)
}
for(i in 1:rows){
int[i, 4]<-sprintf("%02d", i %/% 100, i %% 100)
}
head(int,5)
tail(int,5)
for(i in 1:rows){
int[i, 4]<-sprintf("%02d:%02d", interval[i,3] %/% 100, interval[i,3] %% 100)
}
for(i in 1:rows){
int[i, 4]<-sprintf("%02d:%02d", int[i,3] %/% 100, int[i,3] %% 100)
}
for(i in 1:rows){
j <- int[i,3]
int[i, 4]<-sprintf("%02d:%02d", j %/% 100, j %% 100)
}
j<-int[1,3]
j
as.numeric(j<-int[1,3])
for(i in 1:rows){
j <- as.numeric(int[i,3])
int[i, 4]<-sprintf("%02d:%02d", j %/% 100, j %% 100)
}
head(int, 10)
ast <- summarize(int, steps=mean(steps, na.rm = TRUE))
with(ast, plot(time, steps, type = "l"))
tail(int)
head(ast)
nrow(int)
nrow(ast)
ast$time <- NA
rows <- nrow(ast)
for(i in 1:rows){
j <- as.numeric(int[i,1])
int[i, 3]<-sprintf("%02d:%02d", j %/% 100, j %% 100)
}
for(i in 1:rows){
j <- as.numeric(int[i,1])
ast[i, 3]<-sprintf("%02d:%02d", j %/% 100, j %% 100)
}
for(i in 1:rows){
j <- as.numeric(ast[i,1])
ast[i, 3]<-sprintf("%02d:%02d", j %/% 100, j %% 100)
}
head(ast)
with(ast, plot(time, steps, type = "l"))
?strptime
class(ast[1,3])
ast[1,3]
strptime(ast[1,3])
strptime(ast[1,3], "%H:%M")
strptime(ast[1,3], "%Y-%m-%d %H:%M")
head(ast,50)
as.POSIXct(ast$time, format="%H:%M")
for(i in 1:rows){
j <- as.numeric(ast[i,1])
ast[i, 3]<-as.POSIXct(sprintf("%02d:%02d", j %/% 100, j %% 100)
format="%H:%M")
}
for(i in 1:rows){
j <- as.numeric(ast[i,1])
ast[i, 3]<-as.POSIXct(sprintf("%02d:%02d", j %/% 100, j %% 100),
format="%H:%M")
}
head(ast)
class(ast[1,3])
tail(ast,5)
for(i in 1:rows){
j <- as.numeric(ast[i,1])
ast[i, 3]<-as.POSIXct(sprintf("%02d:%02d", j %/% 100, j %% 100),
format="%H:%M:%S")
}
head(ast)
for(i in 1:rows){
j <- as.numeric(ast[i,1])
ast[i, 3]<-as.POSIXct(sprintf("%02d:%02d", j %/% 100, j %% 100),
format="%H:%M")
}
head(ast)
for(i in 1:rows){
j <- as.numeric(ast[i,1])
ast[i, 3]<-sprintf("%02d:%02d", j %/% 100, j %% 100)
}
head(ast)
class(ast[1,3])
as.POSIXct(ast[1,3])
as.POSIXct(ast[1,3], format=%H:%M)
as.character(ast[1,3])
test<-as.character(ast[1,3])
as.POSIXct(test, format=%H:%M)
as.POSIXct(ast[1,3], format="%H:%M")
test<-as.character(ast[1,3])
test
as.POSIXct(test, format="%H:%M")
as.POSIXct(test, format="%H:%M:%S")
?strptime
?as.POSIXlt
as.POSIXct(ast[1,3], format="%H:%M")
as.POSIXct(ast[1,3], format="%HH:%MM")
as.POSIXct(ast[1,3], format="%m/%d/%Y %H:%M")
class(ast[1,3])
as.POSIXct(test, format="%m/%d/%Y %H:%M")
as.POSIXct(test, format="%H:%M")
strftime(test, "%H:%M")
class(test)
strptime(test,format="%H:%M")
sys.date
sys.date()
sysdate
sysdate()
date()
test
test2<-"2015-03-09 EDT 00:00"
strptime(test2,format="%H:%M")
strptime(test2,format="%Y-%m-%d %H:%M")
strptime(ast[1,3])
strptime(ast[1,3],format="%H:%M")
strptime(test2,format="%Y-%m-%d %Z %H:%M")
strptime(test2,format="%Y-%m-%d %z %H:%M")
strptime(test2,format="%Y-%m-%d %H:%M", tz ="EDT")
strptime(test2,format="%Y-%m-%d %H:%M", tz ="EST5EDT")
test2<-"03/09/2015 00:00"
strptime(test2,format="%m/%d%Y %H:%M", tz =Sys.timezone())
strptime(test2,format="%m/%d/%Y %H:%M", tz =Sys.timezone())
test2<-"03/09/2015 00:05"
strptime(test2,format="%m/%d/%Y %H:%M", tz =Sys.timezone())
strptime(ast[2,3],format="%H:%M")
for(i in 1:rows){
j <- as.numeric(ast[i,1])
ast[i, 3]<-strptime(sprintf("%02d:%02d", j %/% 100, j %% 100),
format="%H:%M")
}
warnings()
head(ast)
for(i in 1:rows){
j <- as.character(ast[i,1])
ast[i, 3]<-strptime(sprintf("%02d:%02d", j %/% 100, j %% 100),
format="%H:%M")
}
for(i in 1:rows){
j <- as.numeric(ast[i,1])
ast[i, 3]<-strptime(sprintf("%02d:%02d", j %/% 100, j %% 100),
format="%H:%M")
}
j
j<-as.numeric(ast[1,1])
j
class(ast[1,1])
k <- as.character(sprintf("%02d:%02d", j %/% 100, j %% 100))
k
strptime(k, format="%H:%M")
for(i in 1:rows){
j <- as.numeric(ast[i,1])
k <- as.character(sprintf("%02d:%02d", j %/% 100, j %% 100))
ast[i, 3]<-strptime(k, format="%H:%M")
}
head(ast)
warnings()
j<-as.numeric(ast[2,1])
j
k<-as.character(sprintf("02d:%02d", j %/% 100, j %% 100))
k
j<-as.numeric(ast[1,1])
j
k<-as.character(sprintf("02d:%02d", j %/% 100, j %% 100))
k
j<-as.numeric(ast[2,1])
k<-as.character(sprintf("%02d:%02d", j %/% 100, j %% 100))
k
l<-strptime(k, format="%H:%M")
l
class(l)
head(ast)
class(ast$time)
for(i in 1:rows){
j <- as.numeric(ast[i,1])
k <- as.character(sprintf("%02d:%02d", j %/% 100, j %% 100))
ast[i, 3]<-strptime(k, format="%H:%M")
}
warnings
warnings()
for(i in 1:rows){
j <- as.numeric(ast[i,1])
k <- as.character(sprintf("%02d:%02d", j %/% 100, j %% 100))
strptime(k, format="%H:%M")
}
l
l<-as.POSIXlt(k, format="%H:%M")
l
class(l)
l<-as.POSIXct(k, format="%H:%M")
class(l)
l
for(i in 1:rows){
j <- as.numeric(ast[i,1])
k <- as.character(sprintf("%02d:%02d", j %/% 100, j %% 100))
as.POSIXct(k, format="%H:%M")
}
head(ast)
ast[1,3]
class(ast[1,1])
t<-ast[1,1]
t
class(t)
as.numeric(t)
l<-as.POSIXlt(k, format="%H:%M")
l
class(l)
ast[1,3]<-l
l<-as.POSIXct(k, format="%H:%M")
ast[1,3]<-l
ast[1,3]
for(i in 1:rows){
j <- as.numeric(ast[i,1])
k <- as.character(sprintf("%02d:%02d", j %/% 100, j %% 100))
ast[i, 3]<-as.POSIXct(k, format="%H:%M")
}
head(ast)
ast[7,3]
ast[8,3]
ast[9,3]
ast[10,3]
with(ast, plot(time, steps, type = "l"))
class(l)
